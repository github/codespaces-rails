# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `reverse_markdown` gem.
# Please instead update this file by running `bin/tapioca gem reverse_markdown`.

# source://reverse_markdown//lib/reverse_markdown/version.rb#1
module ReverseMarkdown
  class << self
    # source://reverse_markdown//lib/reverse_markdown.rb#60
    def cleaner; end

    # @yield [@config]
    #
    # source://reverse_markdown//lib/reverse_markdown.rb#54
    def config; end

    # source://reverse_markdown//lib/reverse_markdown.rb#37
    def convert(input, options = T.unsafe(nil)); end
  end
end

# source://reverse_markdown//lib/reverse_markdown/cleaner.rb#2
class ReverseMarkdown::Cleaner
  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#58
  def clean_punctuation_characters(string); end

  # Find non-asterisk content that is enclosed by two or
  # more asterisks. Ensure that only one whitespace occurs
  # in the border area.
  # Same for underscores and brackets.
  #
  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#32
  def clean_tag_borders(string); end

  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#62
  def force_encoding(string); end

  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#20
  def remove_inner_whitespaces(string); end

  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#16
  def remove_leading_newlines(string); end

  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#12
  def remove_newlines(string); end

  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#4
  def tidy(string); end

  private

  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#81
  def present_or_default(string, default); end

  # source://reverse_markdown//lib/reverse_markdown/cleaner.rb#69
  def preserve_border_whitespaces(string, options = T.unsafe(nil), &block); end
end

# source://reverse_markdown//lib/reverse_markdown/config.rb#2
class ReverseMarkdown::Config
  # @return [Config] a new instance of Config
  #
  # source://reverse_markdown//lib/reverse_markdown/config.rb#5
  def initialize; end

  # source://reverse_markdown//lib/reverse_markdown/config.rb#34
  def force_encoding; end

  # Sets the attribute force_encoding
  #
  # @param value the value to set the attribute force_encoding to.
  #
  # source://reverse_markdown//lib/reverse_markdown/config.rb#3
  def force_encoding=(_arg0); end

  # source://reverse_markdown//lib/reverse_markdown/config.rb#26
  def github_flavored; end

  # Sets the attribute github_flavored
  #
  # @param value the value to set the attribute github_flavored to.
  #
  # source://reverse_markdown//lib/reverse_markdown/config.rb#3
  def github_flavored=(_arg0); end

  # source://reverse_markdown//lib/reverse_markdown/config.rb#30
  def tag_border; end

  # Sets the attribute tag_border
  #
  # @param value the value to set the attribute tag_border to.
  #
  # source://reverse_markdown//lib/reverse_markdown/config.rb#3
  def tag_border=(_arg0); end

  # source://reverse_markdown//lib/reverse_markdown/config.rb#22
  def unknown_tags; end

  # Sets the attribute unknown_tags
  #
  # @param value the value to set the attribute unknown_tags to.
  #
  # source://reverse_markdown//lib/reverse_markdown/config.rb#3
  def unknown_tags=(_arg0); end

  # source://reverse_markdown//lib/reverse_markdown/config.rb#15
  def with(options = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters.rb#2
module ReverseMarkdown::Converters
  class << self
    # source://reverse_markdown//lib/reverse_markdown/converters.rb#18
    def default_converter(tag_name); end

    # source://reverse_markdown//lib/reverse_markdown/converters.rb#12
    def lookup(tag_name); end

    # source://reverse_markdown//lib/reverse_markdown/converters.rb#3
    def register(tag_name, converter); end

    # source://reverse_markdown//lib/reverse_markdown/converters.rb#8
    def unregister(tag_name); end
  end
end

# source://reverse_markdown//lib/reverse_markdown/converters/a.rb#3
class ReverseMarkdown::Converters::A < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/a.rb#4
  def convert(node, state = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://reverse_markdown//lib/reverse_markdown/converters/a.rb#20
  def prepend_space?(node); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/base.rb#3
class ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/base.rb#14
  def escape_keychars(string); end

  # source://reverse_markdown//lib/reverse_markdown/converters/base.rb#18
  def extract_title(node); end

  # source://reverse_markdown//lib/reverse_markdown/converters/base.rb#10
  def treat(node, state); end

  # source://reverse_markdown//lib/reverse_markdown/converters/base.rb#4
  def treat_children(node, state); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/blockquote.rb#3
class ReverseMarkdown::Converters::Blockquote < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/blockquote.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/br.rb#3
class ReverseMarkdown::Converters::Br < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/br.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/bypass.rb#3
class ReverseMarkdown::Converters::Bypass < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/bypass.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/code.rb#3
class ReverseMarkdown::Converters::Code < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/code.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/del.rb#3
class ReverseMarkdown::Converters::Del < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/del.rb#4
  def convert(node, state = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://reverse_markdown//lib/reverse_markdown/converters/del.rb#17
  def disabled?; end

  # @return [Boolean]
  #
  # source://reverse_markdown//lib/reverse_markdown/converters/del.rb#13
  def enabled?; end
end

# source://reverse_markdown//lib/reverse_markdown/converters/details.rb#3
class ReverseMarkdown::Converters::Details < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/details.rb#4
  def convert(node, state = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://reverse_markdown//lib/reverse_markdown/converters/details.rb#17
  def disabled?; end

  # @return [Boolean]
  #
  # source://reverse_markdown//lib/reverse_markdown/converters/details.rb#13
  def enabled?; end
end

# source://reverse_markdown//lib/reverse_markdown/converters/div.rb#3
class ReverseMarkdown::Converters::Div < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/div.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/drop.rb#3
class ReverseMarkdown::Converters::Drop < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/drop.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/em.rb#3
class ReverseMarkdown::Converters::Em < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/em.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/figcaption.rb#3
class ReverseMarkdown::Converters::FigCaption < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/figcaption.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/figure.rb#3
class ReverseMarkdown::Converters::Figure < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/figure.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/h.rb#3
class ReverseMarkdown::Converters::H < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/h.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/hr.rb#3
class ReverseMarkdown::Converters::Hr < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/hr.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/ignore.rb#3
class ReverseMarkdown::Converters::Ignore < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/ignore.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/img.rb#3
class ReverseMarkdown::Converters::Img < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/img.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/li.rb#3
class ReverseMarkdown::Converters::Li < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/li.rb#4
  def convert(node, state = T.unsafe(nil)); end

  # source://reverse_markdown//lib/reverse_markdown/converters/li.rb#24
  def indentation_from(state); end

  # source://reverse_markdown//lib/reverse_markdown/converters/li.rb#15
  def prefix_for(node); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/ol.rb#3
class ReverseMarkdown::Converters::Ol < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/ol.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/p.rb#3
class ReverseMarkdown::Converters::P < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/p.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/pass_through.rb#3
class ReverseMarkdown::Converters::PassThrough < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/pass_through.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/pre.rb#3
class ReverseMarkdown::Converters::Pre < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/pre.rb#4
  def convert(node, state = T.unsafe(nil)); end

  private

  # source://reverse_markdown//lib/reverse_markdown/converters/pre.rb#27
  def language(node); end

  # source://reverse_markdown//lib/reverse_markdown/converters/pre.rb#36
  def language_from_confluence_class(node); end

  # source://reverse_markdown//lib/reverse_markdown/converters/pre.rb#32
  def language_from_highlight_class(node); end

  # Override #treat as proposed in https://github.com/xijo/reverse_markdown/pull/69
  #
  # source://reverse_markdown//lib/reverse_markdown/converters/pre.rb#16
  def treat(node, state); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/strong.rb#3
class ReverseMarkdown::Converters::Strong < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/strong.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/table.rb#3
class ReverseMarkdown::Converters::Table < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/table.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/td.rb#3
class ReverseMarkdown::Converters::Td < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/td.rb#4
  def convert(node, state = T.unsafe(nil)); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/text.rb#3
class ReverseMarkdown::Converters::Text < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#4
  def convert(node, options = T.unsafe(nil)); end

  private

  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#54
  def preserve_keychars_within_backticks(text); end

  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#38
  def preserve_nbsp(text); end

  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#42
  def preserve_tags(text); end

  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#46
  def remove_border_newlines(text); end

  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#50
  def remove_inner_newlines(text); end

  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#14
  def treat_empty(node); end

  # source://reverse_markdown//lib/reverse_markdown/converters/text.rb#25
  def treat_text(node); end
end

# source://reverse_markdown//lib/reverse_markdown/converters/tr.rb#3
class ReverseMarkdown::Converters::Tr < ::ReverseMarkdown::Converters::Base
  # source://reverse_markdown//lib/reverse_markdown/converters/tr.rb#4
  def convert(node, state = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://reverse_markdown//lib/reverse_markdown/converters/tr.rb#10
  def table_header_row?(node); end

  # source://reverse_markdown//lib/reverse_markdown/converters/tr.rb#14
  def underline_for(node); end
end

# source://reverse_markdown//lib/reverse_markdown/errors.rb#2
class ReverseMarkdown::Error < ::StandardError; end

# source://reverse_markdown//lib/reverse_markdown/errors.rb#8
class ReverseMarkdown::InvalidConfigurationError < ::ReverseMarkdown::Error; end

# source://reverse_markdown//lib/reverse_markdown/errors.rb#5
class ReverseMarkdown::UnknownTagError < ::ReverseMarkdown::Error; end

# source://reverse_markdown//lib/reverse_markdown/version.rb#2
ReverseMarkdown::VERSION = T.let(T.unsafe(nil), String)
