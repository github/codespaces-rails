# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/reline/all/reline.rbi
#
# reline-0.4.3

module Reline
  def eof?(*args, **, &block); end
  def readline(*args, **, &block); end
  def readmultiline(*args, **, &block); end
  def self.add_dialog_proc(*args, **, &block); end
  def self.ambiguous_width(*args, **, &block); end
  def self.auto_indent_proc(*args, **, &block); end
  def self.auto_indent_proc=(*args, **, &block); end
  def self.autocompletion(*args, **, &block); end
  def self.autocompletion=(*args, **, &block); end
  def self.basic_quote_characters(*args, **, &block); end
  def self.basic_quote_characters=(*args, **, &block); end
  def self.basic_word_break_characters(*args, **, &block); end
  def self.basic_word_break_characters=(*args, **, &block); end
  def self.completer_quote_characters(*args, **, &block); end
  def self.completer_quote_characters=(*args, **, &block); end
  def self.completer_word_break_characters(*args, **, &block); end
  def self.completer_word_break_characters=(*args, **, &block); end
  def self.completion_append_character(*args, **, &block); end
  def self.completion_append_character=(*args, **, &block); end
  def self.completion_case_fold(*args, **, &block); end
  def self.completion_case_fold=(*args, **, &block); end
  def self.completion_proc(*args, **, &block); end
  def self.completion_proc=(*args, **, &block); end
  def self.completion_quote_character(*args, **, &block); end
  def self.core; end
  def self.delete_text(*args, **, &block); end
  def self.dialog_proc(*args, **, &block); end
  def self.dig_perfect_match_proc(*args, **, &block); end
  def self.dig_perfect_match_proc=(*args, **, &block); end
  def self.emacs_editing_mode(*args, **, &block); end
  def self.emacs_editing_mode?(*args, **, &block); end
  def self.encoding_system_needs; end
  def self.eof?(*args, **, &block); end
  def self.filename_quote_characters(*args, **, &block); end
  def self.filename_quote_characters=(*args, **, &block); end
  def self.get_screen_size(*args, **, &block); end
  def self.input=(*args, **, &block); end
  def self.insert_text(*args, &block); end
  def self.last_incremental_search(*args, **, &block); end
  def self.last_incremental_search=(*args, **, &block); end
  def self.line_buffer(*args, **, &block); end
  def self.line_editor; end
  def self.output=(*args, **, &block); end
  def self.output_modifier_proc(*args, **, &block); end
  def self.output_modifier_proc=(*args, **, &block); end
  def self.point(*args, **, &block); end
  def self.point=(*args, **, &block); end
  def self.pre_input_hook(*args, **, &block); end
  def self.pre_input_hook=(*args, **, &block); end
  def self.prompt_proc(*args, **, &block); end
  def self.prompt_proc=(*args, **, &block); end
  def self.readline(*args, **, &block); end
  def self.readmultiline(*args, **, &block); end
  def self.redisplay(*args, **, &block); end
  def self.special_prefixes(*args, **, &block); end
  def self.special_prefixes=(*args, **, &block); end
  def self.ungetc(c); end
  def self.update_iogate; end
  def self.vi_editing_mode(*args, **, &block); end
  def self.vi_editing_mode?(*args, **, &block); end
  extend Forwardable
  extend SingleForwardable
end
class Reline::ConfigEncodingConversionError < StandardError
end
class Reline::Key < Struct
  def ==(other); end
  def char; end
  def char=(_); end
  def combined_char; end
  def combined_char=(_); end
  def match?(other); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def with_meta; end
  def with_meta=(_); end
end
class Reline::CursorPos < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end
end
class Reline::DialogRenderInfo < Struct
  def bg_color; end
  def bg_color=(_); end
  def contents; end
  def contents=(_); end
  def face; end
  def face=(_); end
  def height; end
  def height=(_); end
  def pos; end
  def pos=(_); end
  def scrollbar; end
  def scrollbar=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def width; end
  def width=(_); end
end
class Reline::Core
  def add_dialog_proc(name_sym, p, context = nil); end
  def ambiguous_width; end
  def auto_indent_proc; end
  def auto_indent_proc=(p); end
  def autocompletion(*args, **, &block); end
  def autocompletion=(*args, **, &block); end
  def basic_quote_characters; end
  def basic_quote_characters=(v); end
  def basic_word_break_characters; end
  def basic_word_break_characters=(v); end
  def completer_quote_characters; end
  def completer_quote_characters=(v); end
  def completer_word_break_characters; end
  def completer_word_break_characters=(v); end
  def completion_append_character; end
  def completion_append_character=(val); end
  def completion_case_fold; end
  def completion_case_fold=(v); end
  def completion_proc; end
  def completion_proc=(p); end
  def completion_quote_character; end
  def config; end
  def config=(arg0); end
  def dialog_proc(name_sym); end
  def dig_perfect_match_proc; end
  def dig_perfect_match_proc=(p); end
  def emacs_editing_mode; end
  def emacs_editing_mode?; end
  def encoding; end
  def filename_quote_characters; end
  def filename_quote_characters=(v); end
  def get_screen_size; end
  def initialize; end
  def inner_readline(prompt, add_hist, multiline, &confirm_multiline_termination); end
  def input=(val); end
  def io_gate; end
  def key_stroke; end
  def key_stroke=(arg0); end
  def last_incremental_search; end
  def last_incremental_search=(arg0); end
  def line_editor; end
  def line_editor=(arg0); end
  def may_req_ambiguous_char_width; end
  def output; end
  def output=(val); end
  def output_modifier_proc; end
  def output_modifier_proc=(p); end
  def pre_input_hook; end
  def pre_input_hook=(p); end
  def prompt_proc; end
  def prompt_proc=(p); end
  def read_2nd_character_of_key_sequence(keyseq_timeout, buffer, c, block); end
  def read_escaped_key(keyseq_timeout, c, block); end
  def read_io(keyseq_timeout, &block); end
  def readline(prompt = nil, add_hist = nil); end
  def readmultiline(prompt = nil, add_hist = nil, &confirm_multiline_termination); end
  def special_prefixes; end
  def special_prefixes=(v); end
  def vi_editing_mode; end
  def vi_editing_mode?; end
  extend Forwardable
end
class Reline::Core::DialogProc < Struct
  def context; end
  def context=(_); end
  def dialog_proc; end
  def dialog_proc=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
